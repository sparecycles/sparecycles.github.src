- link = lambda do |text, href|
  - capture_haml do
    %a{:href=>href}><
      = text

- uses :story
- uses :template
- uses :prettify

- content_for :import_stylesheets do
  style/index

- content_for :import_javascripts do
  storyjs/jquery-1.5.2
  connect4

- content_for :title do
  story.js

- content_for :script do
  :plain
    jQuery(function($) {
      $('body').addClass('loaded');
      prettyPrint();
    });

%h1 Welcome
%p
  I am Adam Freidin.  An ex gamedeveloper turned webdeveloper living and
  working in sunny Santa Cruz.
%p
  I am always interested in hearing about jobs, 
  check out my #{link.call "resume", "/resume.html"}.

%h1#Story
  Story

%pre.main-example.prettyprint
  :preserve
    Connect4Story = Story([
      [
        {
          setup: function() {
            Story.write('game', new Connect4(5,5));
          },
        }, Story.Ignore(Story.Loop(
          { setup: function() {
            DrawGame("Red's turn", Story.read('game'), Story.read('target'));
            $('.column', Story.read('target')).each(function(index) {
              $(this).unbind('click').click(Story.callback(function() {
                var game = Story.read('game');
                if(game.can_move(index)) game.move("red", index);
                this.moved = true;
              }));
            });
          }, update: function() { 
            return !this.moved; 
          }, teardown: function() { 
            Story.read('target').contents().remove(); 
          } },
          { setup: function() {
            DrawGame("Blue's turn", Story.read('game'), Story.read('target'));
            $('.column', Story.read('target')).each(function(index) {
              $(this).unbind('click').click(Story.callback(function() {
                var game = Story.read('game');
                if(game.can_move(index)) game.move("blue", index);
                this.moved = true;
              }));
            });
          }, update: function() { 
            return !this.moved; 
          }, teardown: function() { 
            Story.read('target').contents().remove(); 
          } }
        )), function() {
          var winner = Story.read('game').winner();
          if(winner) Story.write('winner', winner);
          return !winner;
        }
      ], 
      function() {
        var target = Story.read('target');
        DrawGame(Story.read('winner') + ' won!', Story.read('game'), target);
        jQuery('&lt;button/&gt;')
          .text("Play Again?")
          .click(function() {
            Connect4Story.tell({ target: target });
          })
          .prependTo(Story.read('target').find('.connect4'));
      }
    ]);
.main
  %p.large-font
    Lightweight, simple, scalable, modular metascripting. 
    Linearizes and abstracts callback chains.
    Makes complex flow simple.
  %p
    Story is a modular framework for handling asynchronous events.

  %div.target

  %p
    To learn more, please see the #{link.call "API docs", "/litijs?story"}.


:javascript
  function DrawGame(caption, game, target) {
    target.contents().remove();
    var columns = [];
    target.appendText(caption);
    var c4 = jQuery('<div class="connect4"/>').appendTo(target);
    for(var col = 0; col < game.columns.length; col++) {
      var column = jQuery('<div class="column"/>').appendTo(c4);
      for(var row =  game.rows-1; row >= 0; row--) {
        jQuery('<div class="cell-content"/>').appendTo(
          jQuery('<div class="cell"/>').appendTo(column)
        ).addClass(game.columns[col][row]);
      }
    }
  };
  Connect4Story = Story([
    [
      {
        setup: function() {
          Story.write('game', new Connect4(5,5));
        },
      }, Story.Ignore(Story.Loop(
        { setup: function() {
          DrawGame("Red's turn", Story.read('game'), Story.read('target'));
          $('.column', Story.read('target')).each(function(index) {
            $(this).unbind('click').click(Story.callback(function() {
              var game = Story.read('game');
              if(game.can_move(index)) game.move("red", index);
              this.moved = true;
            }));
          });
        }, update: function() { 
          return !this.moved; 
        }, teardown: function() { 
          Story.read('target').contents().remove(); 
        } },
        { setup: function() {
          DrawGame("Blue's turn", Story.read('game'), Story.read('target'));
          $('.column', Story.read('target')).each(function(index) {
            $(this).unbind('click').click(Story.callback(function() {
              var game = Story.read('game');
              if(game.can_move(index)) game.move("blue", index);
              this.moved = true;
            }));
          });
        }, update: function() { 
          return !this.moved; 
        }, teardown: function() { 
          Story.read('target').contents().remove(); 
        } }
      )), function() {
        var winner = Story.read('game').winner();
        if(winner) Story.write('winner', winner);
        return !winner;
      }
    ], 
    function() {
      var target = Story.read('target');
      DrawGame(Story.read('winner') + ' won!', Story.read('game'), target);
      jQuery('<button/>')
        .text("Play Again?")
        .click(function() {
          Connect4Story.tell({ target: target });
        })
        .prependTo(Story.read('target').find('.connect4'));
    }
  ]);

  Connect4Story.tell({ target: jQuery('.target') })

-# vim: set sw=2 ts=2 expandtab :
