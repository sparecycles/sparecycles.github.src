-# vim: set sw=2 ts=2 expandtab :
- uses :screen
- uses :template

- content_for :template do
  .dialog-template
    .dialog
      .title
        %span.title-content
      .dialog-content
      .dialog-buttons
        %button.button .label

- content_for :style do
  :plain
    .dialog .title {
      text-align: center;
    }
    .dialog {
      position: absolute;
      left: 40px;
      top: 40px;
      right: 40px;
      bottom: 40px;
      background: #999;
      padding: 30px;
      border-radius: 20px;
      border: 10px solid gray;
      -webkit-box-shadow: 2px 2px 5px black, 2px 2px 3px black inset; 
    }
    .dialog .dialog-buttons {
      bottom: 20px;
      right: 20px;
      position: absolute;
    }

- content_for :script do
  :plain
    $('#template .dialog-template').defineTemplate('dialog-template', {
      $template: Template.coalesce('.container', '=screen'),
      $let : [{
        data: '...dialog' 
      }], 
      '.dialog' : {
        $as : 'screen-content',
        $in : 'data',
        '.dialog-frame' : {
          '@style' : { 
            width: Template.coalesce('.width', '=500'), 
            height: Template.coalesce('.height', '=200'),
            padding: Template.coalesce('.padding', '=15'),
            'box-shadow' : '=3px 3px 5px #333, 2px 2px 3px #333 inset'
          }
        },
        '.dialog-content' : '%content',
        '.title-content' : '%title',
        '.button' : { $each : { button : 'data.buttons' },
          $in : 'button',
          '@text': '.label',
          $setup: function() {
            var elem = this;
            var controller = Template.access('data.self');
            var action = Template.access('.action');
            var handler = Template.access('data.handler');
            var click_action = function() {
              handler.call(controller, action);
            };
            $(this).click(click_action); 
            Template.teardown(function() { $(elem).unbind('click', click_action); });
          }
        }
      }
    });

    Dialog = _.Class(function(type, content, buttons, handler) {
      var self = this;
      var model = new Template.ViewModel(_.overlay({}, content, {
        type: type,
        dialog: {
          self: self,
          buttons: buttons,
          handler: function(arg) { 
            var result = !handler || handler.call(this.arg);
            if(result || undefined === result) {
              this.close();
            }
          }
        }
      }));
      this.data = model.data;
      this.template = $("<div/>").appendTo($('body')).template(model, {
        '.' : {
          $template: '.type'
        }
      });
    }, {
      proto: {
        is_open: function() {
          return this.hasOwnProperty('template');
        },
        close: function() {
          if(this.hasOwnProperty('template')) {
            this.template.clearTemplate().remove();
            delete this.template;
          }
          delete this.data;
        }
      }
    });

    Story.Plot.Define('Dialog', function() {
      var args = __args();
      // maybe reprocess button into story nodes.
      args[2] = _.map.call(this, args[2], function(button) {
        return _.overlay(button, { action: function(action) {
          var action = button.action;
          if(typeof action === 'function') {
            return action;
          } else if(action instanceof Array) {
            var node = Story.Plot.Build(action);
            return Story.Plot.Register(this, node);
          } else if(action instanceof Story.Plot) {
            return Story.Plot.Register(this, action);
          } else {
            return function() {
              this.scope.result = action;
              this.dialog.close();
              Story.update();
            };
          }
        }.call(this, button.action) }); 
      });
      
      this.create_dialog = function() {
        var dialog = Dialog.apply(null, args);
        var handler = dialog.data('dialog.handler')();
        dialog.data('dialog.handler', Story.callback(function(arg) {
          if(!(arg instanceof Story.Plot)) {
            var result = arg.call(this);
            if(result !== false) dialog.close();
          } else {
            if(this.button_node) {
              Story.Plot.Device.teardown(this.button_node);
            }
            this.button_node = Story.Plot.Device.setup(arg);
          }
          Story.update();
        }));
        return dialog;
      };
    }, {
      setup: function() {
        this.dialog = this.scope.dialog = this.create_dialog();
      },
      update: function() {
        if(this.button_node) {
          Story.Plot.Device.update(this.button_node);
        }
        return this.dialog.is_open();
      },
      teardown: function() {
        if(this.button_node) {
          Story.Plot.Device.teardown(this.button_node);
        }
        if(this.dialog.is_open()) {
          this.dialog.close();
        }
      }
    }, { owns_scope: true });

- content_for :template do
  .basic-dialog
    .title 
    .content

- content_for :script do
  :plain
    $('#template .basic-dialog').defineTemplate('basic-dialog', { 
      $template : '=dialog-template',
      '...dialog' : '.dialog',
      '.content' : { $as : 'content', '@text' : '.content' },
      '.title' : { $as : 'title', '@text' : '.title' }
    });

- content_for :template do
  .picture-dialog
    .title 
    %img.content

- content_for :script do
  :plain
    $('#template .picture-dialog').defineTemplate('picture-dialog', { 
      $template : '=dialog-template',
      '...dialog' : '.dialog',
      '.content' : { $as : 'content', '@src' : '.content' },
      '.title' : { $as : 'title', '@text' : '.title' }
    });
